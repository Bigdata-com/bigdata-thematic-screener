{% extends "/api/base.html.jinja" %}
{% block content %}

<div id="infoModalsContainer"></div>
<!-- <div class="flex flex-col items-start gap-8"> -->
  <div class="w-full max-w-2xl">
    <form id="screenerForm">
      <div class="mb-5">
        <label for="theme" class="block mb-2 font-bold text-lg text-white">
          <span>Theme:</span>
          <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('theme')"
            title="Info about Theme">ⓘ</button>
        </label>
        <input type="text" id="theme"
          class="bg-gray-50 border border-gray-300 text-gray-900 text-lg rounded-lg block w-full p-2.5"
          placeholder="{{ theme }}" required value="{{ theme }}" />
      </div>

      <div class="mb-5">
        <label for="focus" class="block mb-2 font-bold text-lg text-white">
          <span>Focus:</span>
          <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('focus')"
            title="Info about Focus">ⓘ</button>
        </label>
        <textarea id="focus"
          class="bg-gray-50 border border-gray-300 text-gray-900 text-lg rounded-lg block w-full p-2.5"
          placeholder="{{ focus }}" required>{{ focus }}</textarea>
      </div>

      <div class="mb-5">
        <label for="companies" class="block mb-2 font-bold text-lg text-white">
          <span>Company Universe (either a comma separated RavenPack IDs or a watchlist ID):</span>
          <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('companies')"
            title="Info about Company Universe">ⓘ</button>
        </label>
        <input type="text" id="companies"
          class="bg-gray-50 border border-gray-300 text-gray-900 text-lg rounded-lg block w-full p-2.5"
          placeholder="{{ companies }}" required value="{{ companies }}" />
      </div>

      <button type="button" onclick="toggleAdvancedOptions()" id="advancedOptionsBtn"
        class="flex items-center gap-2 text-white bg-gray-600 hover:bg-gray-700 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-lg px-4 py-2 mb-2 transition-colors duration-200">
        <span id="advancedOptionsIcon" class="text-2xl font-bold">+</span>
        <span>Advanced Options</span>
      </button>

      <div id="advanced-options" class="hidden mt-4">
        <div class="mb-5">
          <label for="start_date" class="block mb-2 font-bold text-lg text-white">
            <span>Start Date:</span>
            <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('start_date')"
              title="Info about Start Date">ⓘ</button>
          </label>
          <input type="date" id="start_date"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-lg rounded-lg block w-full p-2.5"
            placeholder="{{ start_date }}" required value="{{ start_date }}" />
        </div>

        <div class="mb-5">
          <label for="end_date" class="block mb-2 font-bold text-lg text-white">
            <span>End Date:</span>
            <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('end_date')"
              title="Info about End Date">ⓘ</button>
          </label>
          <input type="date" id="end_date"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-lg rounded-lg block w-full p-2.5"
            placeholder="{{ end_date }}" required value="{{ end_date }}" />
        </div>

        <div class="mb-5">
          <label for="frequency" class="block mb-2 font-bold text-lg text-white">
            <span>Frequency:</span>
            <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('frequency')"
              title="Info about Frequency">ⓘ</button>
          </label>
          <select id="frequency"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-lg rounded-lg block w-full p-2.5">
            <option value="D" {% if frequency=='D' %}selected{% endif %}>Daily</option>
            <option value="W" {% if frequency=='W' %}selected{% endif %}>Weekly</option>
            <option value="M" {% if frequency=='M' %}selected{% endif %}>Monthly</option>
            <option value="3M" {% if frequency=='3M' %}selected{% endif %}>Quarterly</option>
            <option value="Y" {% if frequency=='Y' %}selected{% endif %}>Yearly</option>
          </select>
        </div>

        <div class="mb-5">
          <label for="fiscal_year" class="block mb-2 font-bold text-lg text-white">
            <span>Fiscal Year:</span>
            <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('fiscal_year')"
              title="Info about Fiscal Year">ⓘ</button>
          </label>
          <input type="text" id="fiscal_year"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-lg rounded-lg block w-full p-2.5"
            placeholder="e.g. 2025" value="{{ fiscal_year if fiscal_year else "" }}" />
        </div>

        <div class="mb-5">
          <label for="llm_model" class="block mb-2 font-bold text-lg text-white">
            <span>LLM Model:</span>
            <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('llm_model')"
              title="Info about LLM Model">ⓘ</button>
          </label>
          <input type="text" id="llm_model"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-lg rounded-lg block w-full p-2.5"
            placeholder="{{ llm_model }}" value="{{ llm_model }}" />
        </div>

        <div class="mb-5">
          <label for="document_type" class="hidden block mb-2 font-bold text-lg text-white">
            <span>Document Type:</span>
            <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('document_type')"
              title="Info about Document Type">ⓘ</button>
          </label>
          <select id="document_type"
            class="hidden bg-gray-50 border border-gray-300 text-gray-900 text-lg rounded-lg block w-full p-2.5">
            <option value="all" {% if document_type=='all' %}selected{% endif %}>ALL</option>
            <option value="filings" {% if document_type=='filings' %}selected{% endif %}>FILINGS</option>
            <option value="transcripts" {% if document_type=='transcripts' %}selected{% endif %}>TRANSCRIPTS</option>
            <option value="news" {% if document_type=='news' %}selected{% endif %}>NEWS</option>
            <option value="files" {% if document_type=='files' %}selected{% endif %}>FILES</option>
          </select>
        </div>

        <div class="mb-5">
          <label for="rerank_threshold" class="block mb-2 font-bold text-lg text-white">
            <span>Rerank Threshold (0-1):</span>
            <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('rerank_threshold')"
              title="Info about Rerank Threshold">ⓘ</button>
          </label>
          <input type="number" id="rerank_threshold"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-lg rounded-lg block w-full p-2.5"
            placeholder="{{ rerank_threshold if rerank_threshold is defined and rerank_threshold is not none else '' }}"
            value="{{ rerank_threshold if rerank_threshold is defined and rerank_threshold is not none else '' }}"
            max="1" min="0" step="0.01">
        </div>

        <div class="mb-5">
          <label for="document_limit" class="block mb-2 font-bold text-lg text-white">
            <span>Document Limit:</span>
            <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('document_limit')"
              title="Info about Document Limit">ⓘ</button>
          </label>
          <input type="number" id="document_limit"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-lg rounded-lg block w-full p-2.5"
            placeholder="{{ document_limit }}" value="{{ document_limit }}" />
        </div>

        <div class="mb-5">
          <label for="batch_size" class="block mb-2 font-bold text-lg text-white">
            <span>Batch Size:</span>
            <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('batch_size')"
              title="Info about Batch Size">ⓘ</button>
          </label>
          <input type="number" id="batch_size"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-lg rounded-lg block w-full p-2.5"
            placeholder="{{ batch_size }}" value="{{ batch_size }}" />
        </div>

      </div>

      <button type="submit"
        class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-lg w-full sm:w-auto px-5 py-2.5 text-center">Run
        Screener</button>
    </form>

  </div>
  <div class="flex flex-col gap-8 w-full max-w-4xl">
    <!-- Stack log viewer, showJsonBtn, and output vertically -->
    <div class="my-8 bg-zinc-900 rounded-lg shadow-lg p-6 text-zinc-100">
      <h2 class="text-lg font-bold mb-4 text-sky-400">Process Logs</h2>
      <div id="logViewer"
        class="bg-zinc-800 border border-slate-700 rounded-md p-4 h-64 overflow-y-auto font-mono text-sm whitespace-pre-wrap break-words text-zinc-100">
      </div>
    </div>
  </div>    

  <button id="showJsonBtn" class="btn mb-4 self-start" style="display:none;">Show raw JSON</button>
  <div id="output" class="w-full"></div>

<!-- </div> -->

<script>
  // Info modal content for each label
  const infoContents = {
    theme: `<b>Theme</b>:<br>The main theme, topic, or trend you want to screen for exposure. It can be specified as a single word or as a short sentence. The Screener will generate a list of sub-themes representing individual, self contained components of the main theme. The theme can contain multiple core concepts, but we would recommend not adding too many core concepts in the same screener run.<br><i>Examples: "Artificial Intelligence", "Supply Chain Reshaping", "Energy Transition"</i>`,
    focus: `<b>Focus</b>:<br> Use this parameter to pass additional, custom instructions to the llm when breaking down the theme into sub-themes. These parameters allow you to guide the mindmap creation and customize it to your needs, as it allows users to inject their own domain knowledge, your specific point of view, and it will ensure that the mindmap will focus on the core concepts required.`,
    companies: `<b>Company Universe</b>:<br>The portfolio of companies you want to screen for exposure, either as a list of RavenPack entity IDs (e.g., ["4A6F00", "D8442A"]) or a watchlist ID (e.g., "44118802-9104-4265-b97a-2e6d88d74893"). Watchlists can be created programmatically using the <a href='https://docs.bigdata.com/getting-started/watchlist_management' target='_blank'>Bigdata.com SDK</a> or through the <a href='https://app.bigdata.com/watchlists' target='_blank'>Bigdata app</a>.`,
    start_date: `<b>Start/End Date</b>:<br>The start and end of the time sample during which you want to screen your portfolio for thematic exposure. Format: <code>YYYY-MM-DD</code>.`,
    document_type: `<b>Document Type</b>:<br>The type of documents to search over. Use this to analyze text data from news, corporate transcripts, or filings. Currently, only "TRANSCRIPTS" is supported.`,
    fiscal_year: `<b>Fiscal Year</b>:<br>For Transcripts and Filings, filter documents by their reporting details. <b>fiscal_year</b> represents the annual reporting period and can be combined with <b>start_date</b> and <b>end_date</b> for time-sensitive queries. Not applicable to News.`,
    rerank_threshold: `<b>Rerank Threshold</b>:<br>Optional, used with sentence search only. Ensures close cosine similarity between sentence embeddings and retrieved chunks. By default, not applied. For most use cases, one-step retrieval is sufficient. <a href='https://docs.bigdata.com/how-to-guides/rerank_search' target='_blank'>Learn more</a>.`,
    frequency: `<b>Frequency</b>:<br>Break down your sample range into higher frequency intervals (<code>D</code>, <code>Y</code>, <code>M</code>, <code>3M</code>, <code>Y</code>). Useful for large samples to control document retrieval over time.`,
    llm_model: `<b>LLM Model</b>:<br>The LLM model to be used for mindmap generation and text analysis. It has to be specified as a string containing both provider name and model name separated by two colons: <provider::model>.`,
    document_limit: `<b>Document Limit</b>:<br>The maximum number of documents to be retrieved by each query. This is a single value that applies to any combination of query statement & date range.`,
    batch_size: `<b>Batch Size</b>:<br>Set this parameter when screening a large portfolio of companies (i.e. 50 or more). It allows to break down the portfolio into smaller batches of fixed size, and instructs the search service to run parallel queries for each and every batch. This allows for improving the sampling across your portfolio, given the document limit constraint that has to be applied per query.`
  };

  function showInfoModal(label) {
    let container = document.getElementById('infoModalsContainer');
    container.innerHTML = `
      <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50" onclick="if(event.target==this)this.style.display='none'">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-2xl p-6 relative">
          <button class="absolute top-3 right-3 text-gray-500 hover:text-gray-700 text-xl font-bold" onclick="this.closest('.fixed').style.display='none'">&times;</button>
          <div class="text-base text-black">${infoContents[label] || 'No info available.'}</div>
          <div class="mt-4 text-sm text-black">For a complete list of parameters and their descriptions, refer to the <a href='http://localhost:8000/docs' target='_blank' class='text-blue-600 underline'>API documentation</a>.</div>
        </div>
      </div>
    `;
  }

  let lastJson = null;
    function escapeHtml(text) {
      if (text === null || text === undefined) return '';
      const str = String(text);
      return str.replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/\"/g, '&quot;')
                .replace(/'/g, '&#39;');
    }  

  function toggleAdvancedOptions() {
    var adv = document.getElementById('advanced-options');
    var btnIcon = document.getElementById('advancedOptionsIcon');
    if (adv.style.display === 'none' || adv.classList.contains('hidden')) {
      adv.style.display = 'block';
      adv.classList.remove('hidden');
      btnIcon.textContent = '-';
    } else {
      adv.style.display = 'none';
      adv.classList.add('hidden');
      btnIcon.textContent = '+';
    }
  }

  // Helper to get URL param
  function getUrlParam(name) {
    const url = new URL(window.location.href);
    return url.searchParams.get(name);
  }

  document.getElementById('screenerForm').onsubmit = async function (e) {
    e.preventDefault();
    const output = document.getElementById('output');
    // const spinner = document.getElementById('spinner');
    const showJsonBtn = document.getElementById('showJsonBtn');
    const submitBtn = document.querySelector('button[type="submit"]');
    output.innerHTML = '';
    output.classList.remove('error');
    showJsonBtn.style.display = 'none';
    lastJson = null;

    // Disable the submit button
    submitBtn.disabled = true;
    submitBtn.textContent = 'Waiting for response...';

    // Gather form data
    const theme = document.getElementById('theme').value.trim();
    const focus = document.getElementById('focus').value.trim();
    const companies = document.getElementById('companies').value.trim();
    const start_date = document.getElementById('start_date').value;
    const end_date = document.getElementById('end_date').value;
    let fiscal_year = document.getElementById('fiscal_year').value.trim();
    if (!fiscal_year || isNaN(Number(fiscal_year))) {
      fiscal_year = null;
    }
    const llm_model = document.getElementById('llm_model').value.trim();
    const document_type = document.getElementById('document_type').value;
    const rerank_threshold = document.getElementById('rerank_threshold').value;
    const frequency = document.getElementById('frequency').value;
    const document_limit = document.getElementById('document_limit').value;
    const batch_size = document.getElementById('batch_size').value;

    // Build request payload
    let payload = {
      theme,
      focus,
      focus,
      fiscal_year,
      llm_model,
      document_type,
      frequency,
      document_limit: document_limit ? parseInt(document_limit) : undefined,
      batch_size: batch_size ? parseInt(batch_size) : undefined
    };

    // A list of companies
    if (companies.includes(',')) {
      payload.companies = companies.split(',').map(s => s.trim()).filter(Boolean);
      // A single RP Entity ID
    } else if (companies.length === 6) {
      payload.companies = [companies];
      // A watchlist ID
    } else if (companies.length > 6) {
      payload.companies = companies;
    }

    if (start_date) payload.start_date = start_date;
    if (end_date) payload.end_date = end_date;
    if (rerank_threshold) payload.rerank_threshold = parseFloat(rerank_threshold);

    // Add token from URL param if present
    const params = new URLSearchParams();
    const token = getUrlParam('token');
    if (token) {
      params.append("token", token);
    }

    // spinner.style.display = 'block';
    try {
      const response = await fetch(`/thematic-screener?${params}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      if (!response.ok) {
        throw new Error(`HTTP error ${response.status}`);
      }
      const data = await response.json();
      lastJson = data;
      // output.innerHTML = renderScreenerReport(data);
      // showJsonBtn.style.display = 'inline-block';

      // Start polling status endpoint every 5 seconds using request_id
      if (data && data.request_id) {
        const requestId = data.request_id;
        let polling = true;
        const logViewer = document.getElementById('logViewer');
        async function pollStatus() {
          try {
            const statusResp = await fetch(`/status/${requestId}`);
            if (!statusResp.ok) {
              throw new Error(`Status HTTP error ${statusResp.status}`);
            }
            const statusData = await statusResp.json();
            // Render logs if available
            if (statusData.logs && Array.isArray(statusData.logs)) {
              logViewer.innerHTML = statusData.logs.map(line => {
                let base = 'mb-1';
                let color = '';
                if (line.toLowerCase().includes('error')) color = 'text-red-400';
                else if (line.toLowerCase().includes('success')) color = 'text-green-400';
                else if (line.toLowerCase().includes('info')) color = 'text-sky-400';
                return `<div class='${base} ${color}'>${line}</div>`;
              }).join('');
              logViewer.scrollTop = logViewer.scrollHeight;
            } else if (statusData.log) {
              logViewer.textContent = statusData.log;
            } else {
              logViewer.textContent = 'No logs yet.';
            }
            // Also show statusData in output
            //output.innerHTML = `<pre>${JSON.stringify(statusData, null, 2)}</pre>`;
            // Stop polling if status is 'completed' or 'failed'
            if (statusData.status === 'completed' || statusData.status === 'failed') {
              polling = false;
              if (statusData.status === 'completed') {
                output.innerHTML = renderScreenerReport(statusData.report)
                showJsonBtn.style.display = 'inline-block';
              }
              return;
            }
          } catch (err) {
            logViewer.innerHTML = `<div class=\"log-line log-error\">❌ Status Error: ${err.message}</div>`;
          }
          if (polling) {
            setTimeout(pollStatus, 5000);
          }
        }
        pollStatus();
      }
    } catch (err) {
      output.innerHTML = `<span class="error">❌ Error: ${err.message}</span>`;
      output.classList.add('error');
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = 'Run Screener';
      //spinner.style.display = 'none';
    }
  };


function renderScreenerReport(data) {
      if (!data || typeof data !== 'object') return '<span class="error">No data to display.</span>';
      let html = '<h2>Thematic Screener Result</h2>';

      // Render theme_scoring (dict of ticker -> CompanyScoring)
      if (data.theme_scoring && data.theme_scoring) {
        html += '<h3>Theme Scoring</h3>';
        html += '<table class="table-main min-w-full divide-y divide-gray-700 bg-[#101116] rounded-lg shadow-lg text-left text-sm text-text">';
        html += '<tr>';
        // Dynamically create theme columns
        let allThemes = new Set();
        for (const scoring of Object.values(data.theme_scoring)) {
          if (scoring.themes) {
            Object.keys(scoring.themes).forEach(theme => allThemes.add(theme));
          }
        }
        const themeList = Array.from(allThemes);
        html += '<th>Ticker</th><th>Industry</th><th>Composite Score</th><th>Motivation</th>';
        themeList.forEach(theme => {
          html += `<th>${escapeHtml(theme)}</th>`;
        });
        html += '</tr>';
        for (const [ticker, scoring] of Object.entries(data.theme_scoring)) {
          html += '<tr>';
          html += `<td>${escapeHtml(scoring.ticker)}</td>`;
          html += `<td>${escapeHtml(scoring.industry)}</td>`;
          html += `<td>${escapeHtml(scoring.composite_score)}</td>`;
          html += `<td>${escapeHtml(scoring.motivation)}</td>`;
          // Explode themes into columns
          themeList.forEach(theme => {
            if (scoring.themes && theme in scoring.themes) {
              html += `<td>${escapeHtml(scoring.themes[theme])}</td>`;
            } else {
              html += '<td></td>';
            }
          });
          html += '</tr>';
        }
        html += '</table>';
      }

      // Render theme_taxonomy (tree)
      function renderTaxonomy(node, depth=0) {
        if (!node) return '';
        let pad = '&nbsp;'.repeat(depth * 4);
        let html = `${pad}<b>${escapeHtml(node.label)}</b> (Node: ${escapeHtml(node.node)})`;
        if (node.summary) html += ` - ${escapeHtml(node.summary)}`;
        if (node.children && node.children.length) {
          html += '<ul>';
          for (const child of node.children) {
            html += '<li>' + renderTaxonomy(child, depth+1) + '</li>';
          }
          html += '</ul>';
        }
        return html;
      }
      if (data.theme_taxonomy) {
        html += '<h3>Theme Taxonomy</h3>';
        html += '<div class="table-main p-4 bg-[#101116] rounded-lg shadow-lg">' + renderTaxonomy(data.theme_taxonomy) + '</div>';
      }

      // Render content (list of LabeledChunk)
      if (data.content && Array.isArray(data.content) && data.content.length) {
        html += '<h3>Labeled Content</h3>';
  html += '<table class="table-main min-w-full divide-y divide-gray-700 bg-[#101116] rounded-lg shadow-lg text-left text-sm text-text">';
        html += '<tr>';
        html += '<th>Time Period</th><th>Date</th><th>Company</th><th>Sector</th><th>Industry</th><th>Country</th><th>Ticker</th><th>Document ID</th><th>Headline</th><th>Quote</th><th>Motivation</th><th>Theme</th>';
        html += '</tr>';
        for (const chunk of data.content) {
          html += '<tr>';
          html += `<td>${escapeHtml(chunk.time_period)}</td>`;
          html += `<td>${escapeHtml(chunk.date)}</td>`;
          html += `<td>${escapeHtml(chunk.company)}</td>`;
          html += `<td>${escapeHtml(chunk.sector)}</td>`;
          html += `<td>${escapeHtml(chunk.industry)}</td>`;
          html += `<td>${escapeHtml(chunk.country)}</td>`;
          html += `<td>${escapeHtml(chunk.ticker)}</td>`;
          html += `<td>${escapeHtml(chunk.document_id)}</td>`;
          html += `<td>${escapeHtml(chunk.headline)}</td>`;
          html += `<td>${escapeHtml(chunk.quote)}</td>`;
          html += `<td>${escapeHtml(chunk.motivation)}</td>`;
          html += `<td>${escapeHtml(chunk.theme)}</td>`;
          html += '</tr>';
        }
        html += '</table>';
      }
      return html;
    }  
</script>
</form>
{% endblock %}