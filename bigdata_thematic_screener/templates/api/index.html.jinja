{% extends "/api/base.html.jinja" %}
{% block content %}

<div id="infoModalsContainer"></div>
<div class="flex flex-row w-full min-h-[500px]">
  <!-- Left: Form -->
  <div id="sidebar" class="min-w-[150px] max-w-[600px] w-[300px] pr-6 bg-zinc-800 pl-2 rounded-l-lg pt-2 pb-2  transition-all duration-100 ease-in-out">
    <div class="overflow-y-auto">
    <form id="screenerForm" autocomplete="off" class="sticky top-0 z-10">
      <div class="mb-5">
        <label for="theme" class="block mb-2 font-bold text-md text-white">
          <span>Theme:</span>
          <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('theme')"
            title="Info about Theme">ⓘ</button>
        </label>
        <input type="text" id="theme"
          class="bg-gray-50 border border-gray-300 text-gray-900 text-md rounded-lg block w-full p-2"
          placeholder="{{ theme }}" required value="{{ theme }}" />
      </div>

      <div class="mb-5">
        <label for="focus" class="block mb-2 font-bold text-md text-white">
          <span>Focus:</span>
          <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('focus')"
            title="Info about Focus">ⓘ</button>
        </label>
        <textarea id="focus" class="bg-gray-50 border border-gray-300 text-gray-900 text-md rounded-lg block w-full p-2"
          placeholder="{{ focus }}"
          required>{{ focus }}</textarea>
      </div>

      <div class="mb-5">
        <label for="companies" class="block mb-2 font-bold text-md text-white">
          <span>Company Universe:</span>
          <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('companies')"
            title="Info about Company Universe">ⓘ</button>
        </label>
        <div class="relative"> <!-- dropdown -->
          <input id="companies_text" type="text"
            class="absolute w-[calc(100%-20px)] bg-gray-50 text-gray-900 text-md rounded-lg block p-2.5 h-[42px]" />
          <select id="companies"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-md rounded-lg block w-full p-2.5 h-[42px] z-10"
            onchange="this.previousElementSibling.value=this.options[this.selectedIndex].text;">
            <!-- Options are added in a javascript-->
          </select>
        </div>
      </div>

      <button type="button" onclick="toggleAdvancedOptions()" id="advancedOptionsBtn"
        class="flex items-center gap-2 text-white bg-gray-600 hover:bg-gray-700 font-medium rounded-lg text-base px-3 py-1.5 mb-2 transition-colors duration-200">
        <span id="advancedOptionsIcon" class="text-2xl font-bold">+</span>
        <span>Advanced Options</span>
      </button>

      <div id="advanced-options" class="hidden mt-4">
        <div class="mb-5">
          <label for="start_date" class="block mb-2 font-bold text-md text-white">
            <span>Start Date:</span>
            <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('start_date')"
              title="Info about Start Date">ⓘ</button>
          </label>
          <input type="date" id="start_date"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-md rounded-lg block w-full p-2"
            placeholder="{{ start_date }}" required value="{{ start_date }}" />
        </div>

        <div class="mb-5">
          <label for="end_date" class="block mb-2 font-bold text-md text-white">
            <span>End Date:</span>
            <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('end_date')"
              title="Info about End Date">ⓘ</button>
          </label>
          <input type="date" id="end_date"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-md rounded-lg block w-full p-2"
            placeholder="{{ end_date }}" required value="{{ end_date }}" />
        </div>

        <div class="mb-5">
          <label for="frequency" class="block mb-2 font-bold text-md text-white">
            <span>Frequency:</span>
            <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('frequency')"
              title="Info about Frequency">ⓘ</button>
          </label>
          <select id="frequency" class="bg-gray-50 border border-gray-300 text-gray-900 text-md rounded-lg block w-full p-2.5">
            <option value="D" {% if frequency == 'D' %}selected{% endif %}>Daily</option>
            <option value="W" {% if frequency == 'W' %}selected{% endif %}>Weekly</option>
            <option value="M" {% if frequency == 'M' %}selected{% endif %}>Monthly</option>
            <option value="3M" {% if frequency == '3M' %}selected{% endif %}>Quarterly</option>
            <option value="Y" {% if frequency == 'Y' %}selected{% endif %}>Yearly</option>
          </select>
        </div>

        <div class="mb-5">
          <label for="fiscal_year" class="block mb-2 font-bold text-md text-white">
            <span>Fiscal Year:</span>
            <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('fiscal_year')"
              title="Info about Fiscal Year">ⓘ</button>
          </label>
          <input type="text" id="fiscal_year"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-md rounded-lg block w-full p-2.5"
            placeholder="e.g. 2025" value="{{ fiscal_year if fiscal_year else "" }}" />
        </div>

        <div class="mb-5">
          <label for="llm_model" class="block mb-2 font-bold text-md text-white">
            <span>LLM Model:</span>
            <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('llm_model')"
              title="Info about LLM Model">ⓘ</button>
          </label>
          <input type="text" id="llm_model"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-md rounded-lg block w-full p-2.5"
            placeholder="{{ llm_model }}" value="{{ llm_model }}" />
        </div>

        <div class="mb-5">
          <label for="document_type" class="hidden block mb-2 font-bold text-md text-white">
            <span>Document Type:</span>
            <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('document_type')"
              title="Info about Document Type">ⓘ</button>
          </label>
          <select id="document_type"
            class="hidden bg-gray-50 border border-gray-300 text-gray-900 text-md rounded-lg block w-full p-2.5">
            <option value="all" {% if document_type=='all' %}selected{% endif %}>ALL</option>
            <option value="filings" {% if document_type=='filings' %}selected{% endif %}>FILINGS</option>
            <option value="transcripts" {% if document_type=='transcripts' %}selected{% endif %}>TRANSCRIPTS</option>
            <option value="news" {% if document_type=='news' %}selected{% endif %}>NEWS</option>
            <option value="files" {% if document_type=='files' %}selected{% endif %}>FILES</option>
          </select>
        </div>

        <div class="mb-5">
          <label for="rerank_threshold" class="block mb-2 font-bold text-md text-white">
            <span>Rerank Threshold (0-1):</span>
            <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('rerank_threshold')"
              title="Info about Rerank Threshold">ⓘ</button>
          </label>
          <input type="number" id="rerank_threshold"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-md rounded-lg block w-full p-2.5"
            placeholder="{{ rerank_threshold if rerank_threshold is defined and rerank_threshold is not none else '' }}"
            value="{{ rerank_threshold if rerank_threshold is defined and rerank_threshold is not none else '' }}"
            max="1" min="0" step="0.01">
        </div>

        <div class="mb-5">
          <label for="document_limit" class="block mb-2 font-bold text-md text-white">
            <span>Document Limit:</span>
            <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('document_limit')"
              title="Info about Document Limit">ⓘ</button>
          </label>
          <input type="number" id="document_limit"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-md rounded-lg block w-full p-2.5"
            placeholder="{{ document_limit }}" value="{{ document_limit }}" />
        </div>

        <div class="mb-5">
          <label for="batch_size" class="block mb-2 font-bold text-md text-white">
            <span>Batch Size:</span>
            <button type="button" class="text-blue-500 text-sm" onclick="showInfoModal('batch_size')"
              title="Info about Batch Size">ⓘ</button>
          </label>
          <input type="number" id="batch_size"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-md rounded-lg block w-full p-2.5"
            placeholder="{{ batch_size }}" value="{{ batch_size }}" />
        </div>

      </div>
      <button type="submit"
        class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-md w-full sm:w-auto px-5 py-2.5 text-center">Run
        Screener</button>
    </form>
    </div>
    <div id="spinner" class="hidden p-2.5">⏳ Running...</div>
  </div>
  <!-- Drag bar -->
  <div id="dragbar" class="w-2 cursor-ew-resize bg-zinc-700 hover:bg-blue-500 transition-colors duration-100 ease-in-out z-20" style="position: relative;"></div>
  <!-- Right: Output -->
  <div id="outputarea" class="flex-1 min-w-[300px] bg-zinc-900 p-8 rounded-r-lg transition-all duration-100 ease-in-out">
    <button id="showJsonBtn"
      class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-md w-full sm:w-auto px-5 py-2.5 text-center mb-4"
      style="display:none;">Show raw JSON</button>
    <div id="output" class="w-full">
      <div class="flex flex-col h-full py-5">
        <h1 class="text-3xl font-bold text-white mb-4">Thematic Screener</h1>
        <p class="mb-4">
          Systematically connects companies to investment themes using unstructured data 
          from millions of documents.
        </p>

        <h2 class="text-2xl font-bold text-white mb-4">HOW TO USE:</h2>
        <ol class="list-decimal mb-4 pl-6">
          <li>Configure your screening parameters in the sidebar</li>
          <li>Click <strong>"Run Screener"</strong> to begin analysis</li>
          <li>Monitor the logs below to see the process working in the background</li>
          <li>Results will appear below once processing is complete</li>
        </ol>

        <h2 class="text-2xl font-bold text-white mb-4">CURRENT LIMITATIONS:</h2>
        <ul class="list-disc mb-4 pl-6">
          <li>Demo version retrieves <strong>TRANSCRIPT</strong> documents only, restricted to 4 temporal buckets (e.g., 4 quarters)</li>
          <li>Processing may take a few minutes for complex queries</li>
          <li>This is an experimental tool – results should be validated independently before making investment decisions</li>
        </ul>

        <p class="">
        Check our repo 
        <a href="https://github.com/Bigdata-com/bigdata-cookbook" target="_blank" class="font-bold hover:text-blue-200">
          https://github.com/Bigdata-com/bigdata-cookbook
        </a> for the complete and customizable version.
        </p>
      </div>
    </div>
  </div>
</div>
<!-- Logs below both -->
<div class="my-8 bg-zinc-900 rounded-lg shadow-lg p-6 text-zinc-100" style="width: 100%;">
  <h2 class="text-lg font-bold mb-4 text-sky-400">Process Logs</h2>
  <div id="logViewer"
    class="bg-zinc-800 border border-slate-700 rounded-md p-4 h-64 overflow-y-auto font-mono text-sm whitespace-pre-wrap break-words text-zinc-100">
  </div>
</div>

<!-- Modal for JSON output -->
<div id="jsonModal" class="hidden fixed z-[1000] inset-0 w-screen h-screen bg-black/50">
  <div class="bg-white relative my-20 mx-auto p-5 rounded-lg w-4/5 max-w-[900px]">
    <button id="copyBtn" onclick="copyJson()"
      class="absolute top-[10px] right-[50px] text-[15px] px-[10px] py-[4px] cursor-pointer text-gray-900">Copy</button>
    <button onclick="closeModal()" class="absolute top-2.5 right-2.5 text-lg text-gray-900">&times;</button>
    <h2 class="text-gray-900">Raw JSON Output</h2>
    <pre id="jsonContent"
      class="bg-gray-900 text-gray-100 p-4 whitespace-pre-wrap break-words overflow-auto rounded-md mt-5"
      style="max-height:60vh;"></pre>
  </div>
</div>
<script> // Resizable sidebar logic
document.addEventListener('DOMContentLoaded', function() {
  const dragbar = document.getElementById('dragbar');
  const sidebar = document.getElementById('sidebar');
  const outputarea = document.getElementById('outputarea');
  let dragging = false;
  dragbar.addEventListener('mousedown', function(e) {
    dragging = true;
    document.body.classList.add('cursor-ew-resize');
    document.body.style.userSelect = 'none';
  });
  document.addEventListener('mousemove', function(e) {
    if (!dragging) return;
    const minSidebar = 250;
    const maxSidebar = 600;
    let newWidth = Math.min(Math.max(e.clientX - sidebar.getBoundingClientRect().left, minSidebar), maxSidebar);
    sidebar.style.width = newWidth + 'px';
    // outputarea will flex to fill remaining space
  });
  document.addEventListener('mouseup', function(e) {
    if (dragging) {
      dragging = false;
      document.body.classList.remove('cursor-ew-resize');
      document.body.style.userSelect = '';
    }
  });
});
</script>
<script>
  // Info modal content for each label
  const infoContents = {
    theme: `<b>Theme</b>:<br>The main theme, topic, or trend you want to screen for exposure. It can be specified as a single word or as a short sentence. The Screener will generate a list of sub-themes representing individual, self contained components of the main theme. The theme can contain multiple core concepts, but we would recommend not adding too many core concepts in the same screener run.<br><i>Examples: "Artificial Intelligence", "Supply Chain Reshaping", "Energy Transition"</i>`,
    focus: `<b>Focus</b>:<br> Use this parameter to pass additional, custom instructions to the llm when breaking down the theme into sub-themes. These parameters allow you to guide the mindmap creation and customize it to your needs, as it allows users to inject their own domain knowledge, your specific point of view, and it will ensure that the mindmap will focus on the core concepts required.`,
    companies: `<b>Company Universe</b>:<br>The portfolio of companies you want to screen for exposure, you have several input options:<br><ul class="list-disc pl-6"><li>Select one of the public watchlists using the dropdown menu</li><li>Write list of RavenPack entity IDs (e.g., <code>4A6F00, D8442A</code>)</li><li>Input a watchlist ID (e.g., <code>44118802-9104-4265-b97a-2e6d88d74893</code> )</li></ul><br>Watchlists can be created programmatically using the <a href='https://docs.bigdata.com/getting-started/watchlist_management' target='_blank'>Bigdata.com SDK</a> or through the <a href='https://app.bigdata.com/watchlists' target='_blank'>Bigdata app</a>.`,
    start_date: `<b>Start/End Date</b>:<br>The start and end of the time sample during which you want to screen your portfolio for thematic exposure. Format: <code>YYYY-MM-DD</code>.`,
    document_type: `<b>Document Type</b>:<br>The type of documents to search over. Use this to analyze text data from news, corporate transcripts, or filings. Currently, only "TRANSCRIPTS" is supported.`,
    fiscal_year: `<b>Fiscal Year</b>:<br>For Transcripts and Filings, filter documents by their reporting details. <b>fiscal_year</b> represents the annual reporting period and can be combined with <b>start_date</b> and <b>end_date</b> for time-sensitive queries. Not applicable to News.`,
    rerank_threshold: `<b>Rerank Threshold</b>:<br>Optional, used with sentence search only. Ensures close cosine similarity between sentence embeddings and retrieved chunks. By default, not applied. For most use cases, one-step retrieval is sufficient. <a href='https://docs.bigdata.com/how-to-guides/rerank_search' target='_blank'>Learn more</a>.`,
    frequency: `<b>Frequency</b>:<br>Break down your sample range into higher frequency intervals (<code>D</code>, <code>Y</code>, <code>M</code>, <code>3M</code>, <code>Y</code>). Useful for large samples to control document retrieval over time.`,
    llm_model: `<b>LLM Model</b>:<br>The LLM model to be used for mindmap generation and text analysis. It has to be specified as a string containing both provider name and model name separated by two colons: <provider::model>.`,
    document_limit: `<b>Document Limit</b>:<br>The maximum number of documents to be retrieved by each query. This is a single value that applies to any combination of query statement & date range.`,
    batch_size: `<b>Batch Size</b>:<br>Set this parameter when screening a large portfolio of companies (i.e. 50 or more). It allows to break down the portfolio into smaller batches of fixed size, and instructs the search service to run parallel queries for each and every batch. This allows for improving the sampling across your portfolio, given the document limit constraint that has to be applied per query.`,
    headline_comment: `<b>Headline</b>:<br>Click on each headline to retrieve the DOCUMENT ID. The DOCUMENT ID identifies the document that contains that  headline.`,
  };

  const watchlists = {{ example_watchlists | tojson }};

  // Calculate dates for start_date and end_date
  const today = new Date();
  const sixMonthsAgo = new Date();
  sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
  sixMonthsAgo.setDate(1);

  // Format a date as YYYY-MM-DD
  function formatDate(date) {
    const yyyy = date.getFullYear();
    const mm = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based
    const dd = String(date.getDate()).padStart(2, '0');
    return `${yyyy}-${mm}-${dd}`;
  }

  // Calculate maximum number of days based on frequency (maximum 4 times the frequency)
  function calculateMaxDays(frequency) {
    const frequencyToDays = {
      // Here we tweak this values to get reasonable max ranges
      'D': 14,     // 2 weeks
      'W': 120,     // 4 months
      'M': 180,    // Half a year
      '3M': 365,   // Quarterly: 1 year
      'Y': 1460    // 4 years
    };
    
    const baseDays = frequencyToDays[frequency] || 90; // Default to quarterly if unknown
    return baseDays 
  }

  // Validate date range based on frequency
  function validateDateRange(startDate, endDate, frequency) {
    if (!startDate || !endDate || !frequency) {
      return { isValid: true, message: '' }; // Skip validation if any value is missing
    }
    
    const start = new Date(startDate);
    const end = new Date(endDate);
    const diffTime = Math.abs(end - start);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    const maxDays = calculateMaxDays(frequency);
    
    if (diffDays > maxDays) {
      const frequencyNames = {
        'D': 'Daily',
        'W': 'Weekly',
        'M': 'Monthly', 
        '3M': 'Quarterly',
        'Y': 'Yearly'
      };
      const frequencyName = frequencyNames[frequency] || frequency;
      
      return {
        isValid: false,
        message: `Date range exceeds maximum allowed for ${frequencyName} frequency. <br>Maximum: ${maxDays} days.<br>Current range: ${diffDays} days.<br>Use the endpoint directly for full control`
      };
    }
    
    return { isValid: true, message: '' };
  }

  // Add event listeners for date range validation
  function validateAndShowError() {
    const startDateValue = document.getElementById('start_date').value;
    const endDateValue = document.getElementById('end_date').value;
    const frequencyValue = document.getElementById('frequency').value;
    
    const validation = validateDateRange(startDateValue, endDateValue, frequencyValue);
    
    // Remove any existing error message
    const existingError = document.getElementById('dateRangeError');
    if (existingError) {
      existingError.remove();
    }
    
    if (!validation.isValid) {
      // Create and show error message
      const errorDiv = document.createElement('div');
      errorDiv.id = 'dateRangeError';
      errorDiv.className = 'mb-5 p-3 bg-red-800 text-white rounded-lg border border-red-600';
      errorDiv.innerHTML = `<strong>⚠️ Date Range Error:</strong> <br> ${validation.message}`;
      
      // Insert after the frequency field
      const frequencyField = document.getElementById('frequency').closest('.mb-5');
      frequencyField.parentNode.insertBefore(errorDiv, frequencyField.nextSibling);
    }
  }

  // Add event listeners after the DOM is ready
  document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('start_date').addEventListener('change', validateAndShowError);
    document.getElementById('end_date').addEventListener('change', validateAndShowError);
    document.getElementById('frequency').addEventListener('change', validateAndShowError);
  });

  // Populate the dropdown with watchlists
  const comp_select = document.getElementById('companies');
  const comp_text = document.getElementById('companies_text');
  watchlists.forEach((watchlist, index) => {
   if (watchlist.id === "{{ companies }}") {
      comp_text.value = watchlist.name;
    }
    const option = document.createElement('option');
    option.value = watchlist.id;
    option.textContent = watchlist.name;
    comp_select.appendChild(option);
  });

  function showInfoModal(label) {
    let container = document.getElementById('infoModalsContainer');
    container.innerHTML = `
      <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50" onclick="if(event.target==this)this.style.display='none'">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-2xl p-6 relative">
          <button class="absolute top-3 right-3 text-gray-500 hover:text-gray-700 text-xl font-bold" onclick="this.closest('.fixed').style.display='none'">&times;</button>
          <div class="text-base text-black">${infoContents[label] || 'No info available.'}</div>
          <div class="mt-4 text-sm text-black">For a complete list of parameters and their descriptions, refer to the <a href='http://localhost:8000/docs' target='_blank' class='text-blue-600 underline'>API documentation</a>.</div>
        </div>
      </div>
    `;
  }

  function showDocumentModal(document_id) {
    let container = document.getElementById('infoModalsContainer');
    container.innerHTML = `
      <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50" onclick="if(event.target==this)this.style.display='none'">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-2xl p-6 relative">
          <button class="absolute top-3 right-3 text-gray-500 hover:text-gray-700 text-xl font-bold" onclick="this.closest('.fixed').style.display='none'">&times;</button>
          <div class="text-base font-bold text-black">DOCUMENT ID</div>
          <div class="text-base text-black">${document_id}</div>
        </div>
      </div>
    `;
  }

  function escapeHtml(text) {
    if (text === null || text === undefined) return '';
    const str = String(text);
    return str.replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/\"/g, '&quot;')
      .replace(/'/g, '&#39;');
  }

  function toggleAdvancedOptions() {
    var adv = document.getElementById('advanced-options');
    var btnIcon = document.getElementById('advancedOptionsIcon');
    if (adv.style.display === 'none' || adv.classList.contains('hidden')) {
      adv.style.display = 'block';
      adv.classList.remove('hidden');
      btnIcon.textContent = '-';
    } else {
      adv.style.display = 'none';
      adv.classList.add('hidden');
      btnIcon.textContent = '+';
    }
  }

  // Helper to get URL param
  function getUrlParam(name) {
    const url = new URL(window.location.href);
    return url.searchParams.get(name);
  }

  document.getElementById('screenerForm').onsubmit = async function (e) {
    e.preventDefault();
    const output = document.getElementById('output');
    const spinner = document.getElementById('spinner');
    const showJsonBtn = document.getElementById('showJsonBtn');
    const submitBtn = document.querySelector('button[type="submit"]');
    output.innerHTML = '';
    output.classList.remove('error');
    showJsonBtn.style.display = 'none';
    lastReport = null;

    // Validate date range first
    const startDateInput = document.getElementById('start_date').value;
    const endDateInput = document.getElementById('end_date').value;
    const frequencyInput = document.getElementById('frequency').value;
    
    const dateValidation = validateDateRange(startDateInput, endDateInput, frequencyInput);
    if (!dateValidation.isValid) {
      output.innerHTML = `<span class="error">❌ ${dateValidation.message}</span>`;
      output.classList.add('error');
      return;
    }

    // Disable the submit button
    submitBtn.disabled = true;
    submitBtn.textContent = 'Waiting for response...';

    // Gather form data
    const theme = document.getElementById('theme').value.trim();
    const focus = document.getElementById('focus').value.trim();
    // Get companies and check if its available in the watchlists
    let companies = document.getElementById('companies_text').value.trim();
    const foundWatchlist = watchlists.find(w => w.name === companies);
    if (foundWatchlist) {
      companies = foundWatchlist.id;
    }
    else if (!companies) {
      output.innerHTML = `<span class="error">❌ Error: Company Universe is required.</span>`;
      output.classList.add('error');
      submitBtn.disabled = false;
      submitBtn.textContent = 'Run Screener';
      return;
    }
    const start_date = document.getElementById('start_date').value;
    const end_date = document.getElementById('end_date').value;
    let fiscal_year = document.getElementById('fiscal_year').value.trim();
    if (!fiscal_year || isNaN(Number(fiscal_year))) {
      fiscal_year = null;
    }
    const llm_model = document.getElementById('llm_model').value.trim();
    const document_type = document.getElementById('document_type').value;
    const rerank_threshold = document.getElementById('rerank_threshold').value;
    const frequency = document.getElementById('frequency').value;
    const document_limit = document.getElementById('document_limit').value;
    const batch_size = document.getElementById('batch_size').value;

    // Build request payload
    let payload = {
      theme,
      focus,
      focus,
      fiscal_year,
      llm_model,
      document_type,
      frequency,
      document_limit: document_limit ? parseInt(document_limit) : undefined,
      batch_size: batch_size ? parseInt(batch_size) : undefined
    };

    // A list of companies
    if (companies.includes(',')) {
      payload.companies = companies.split(',').map(s => s.trim()).filter(Boolean);
      // A single RP Entity ID
    } else if (companies.length === 6) {
      payload.companies = [companies];
      // A watchlist ID
    } else if (companies.length > 6) {
      payload.companies = companies;
    }

    if (start_date) payload.start_date = start_date;
    if (end_date) payload.end_date = end_date;
    if (rerank_threshold) payload.rerank_threshold = parseFloat(rerank_threshold);

    // Add token from URL param if present
    const params = new URLSearchParams();
    const token = getUrlParam('token');
    if (token) {
      params.append("token", token);
    }

    try {
      const response = await fetch(`/thematic-screener?${params}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      if (!response.ok) {
        throw new Error(`HTTP error ${response.status}`);
      }
      const data = await response.json();
      // Start polling status endpoint every 5 seconds using request_id
      if (data && data.request_id) {
        const requestId = data.request_id;
        let polling = true;
        const logViewer = document.getElementById('logViewer');
        async function pollStatus() {

          try {
            const statusResp = await fetch(`/status/${requestId}?${params}`);
            if (!statusResp.ok) {
              throw new Error(`Status HTTP error ${statusResp.status}`);
            }
            const statusData = await statusResp.json();
            spinner.style.display = 'block';
            // Render logs if available
            if (statusData.logs && Array.isArray(statusData.logs)) {
              logViewer.innerHTML = statusData.logs.map(line => {
                let base = 'mb-1';
                let color = '';
                if (line.toLowerCase().includes('error')) color = 'text-red-400';
                else if (line.toLowerCase().includes('success')) color = 'text-green-400';
                else if (line.toLowerCase().includes('info')) color = 'text-sky-400';
                return `<div class='${base} ${color}'>${line}</div>`;
              }).join('');
              logViewer.scrollTop = logViewer.scrollHeight;
            } else if (statusData.log) {
              logViewer.textContent = statusData.log;
            } else {
              logViewer.textContent = 'No logs yet.';
            }
            // Stop polling if status is 'completed' or 'failed'
            if (statusData.status === 'completed' || statusData.status === 'failed') {
              polling = false;
              if (statusData.status === 'completed') {
                output.innerHTML = renderScreenerReport(statusData.report)
                showJsonBtn.style.display = 'inline-block';
                lastReport = statusData.report;
              }
              spinner.style.display = 'none';
              submitBtn.disabled = false;
              submitBtn.textContent = 'Run Screener';
              return;
            }
          } catch (err) {
            logViewer.innerHTML = `<div class=\"log-line log-error\">❌ Status Error: ${err.message}</div>`;
          }
          if (polling) {
            setTimeout(pollStatus, 5000);
          }
        }
        pollStatus();
      }
    } catch (err) {
      output.innerHTML = `<span class="error">❌ Error: ${err.message}</span>`;
      output.classList.add('error');
      submitBtn.disabled = false;
      submitBtn.textContent = 'Run Screener';
      spinner.style.display = 'none';
    }
  };

  document.getElementById('showJsonBtn').onclick = function () {
    if (lastReport) {
      document.getElementById('jsonContent').textContent = JSON.stringify(lastReport, null, 2);
      document.getElementById('jsonModal').style.display = 'block';
    }
  };

  function renderScreenerReport(data) {
    if (!data || typeof data !== 'object') return '<span class="error">No data to display.</span>';
    let html = '<h2 class="text-3xl font-bold text-white mb-4">Thematic Screener Result</h2>';

    // Render theme_scoring (dict of ticker -> CompanyScoring)
    if (data.theme_scoring && data.theme_scoring) {
      html += '<h3 class="text-2xl font-bold text-white mb-2">Theme Scoring</h3>';
      html += '<div class="max-h-[500px] overflow-y-auto">'
      html += '<table class="table-auto">';
      html += '<tr>';
      // Dynamically create theme columns
      let allThemes = new Set();
      for (const scoring of Object.values(data.theme_scoring)) {
        if (scoring.themes) {
          Object.keys(scoring.themes).forEach(theme => allThemes.add(theme));
        }
      }
      const themeList = Array.from(allThemes);
      html += '<th class="sticky top-0 z-10 bg-zinc-900">Ticker</th><th class="sticky top-0 z-10 bg-zinc-900">Industry</th><th class="sticky top-0 z-10 bg-zinc-900">Composite Score</th><th class="sticky top-0 z-10 bg-zinc-900">Motivation</th>';
      themeList.forEach(theme => {
        html += `<th class="sticky top-0 z-10 bg-zinc-900">${escapeHtml(theme)}</th>`;
      });
      html += '</tr>';
      for (const [ticker, scoring] of Object.entries(data.theme_scoring)) {
        html += '<tr class="divide-y divide-white">';
        html += `<td>${escapeHtml(scoring.ticker)}</td>`;
        html += `<td>${escapeHtml(scoring.industry)}</td>`;
        html += `<td>${escapeHtml(scoring.composite_score)}</td>`;
        html += `<td>${escapeHtml(scoring.motivation)}</td>`;
        // Explode themes into columns
        themeList.forEach(theme => {
          if (scoring.themes && theme in scoring.themes) {
            html += `<td>${escapeHtml(scoring.themes[theme])}</td>`;
          } else {
            html += '<td></td>';
          }
        });
        html += '</tr>';
      }
      html += '</table>';
      html += '</div>'
    }

    // Render theme_taxonomy (tree)
    function renderTaxonomy(node, depth = 0) {
      if (!node) return '';
      let pad = '&nbsp;'.repeat(depth * 4);
      let html = `${pad}<b>${escapeHtml(node.label)}</b> (Node: ${escapeHtml(node.node)})`;
      if (node.summary) html += ` - ${escapeHtml(node.summary)}`;
      if (node.children && node.children.length) {
        html += '<ul>';
        for (const child of node.children) {
          html += '<li>' + renderTaxonomy(child, depth + 1) + '</li>';
        }
        html += '</ul>';
      }
      return html;
    }
    if (data.theme_taxonomy) {
      html += '<h3 class="text-2xl font-bold text-white mb-2">Theme Taxonomy</h3>';
      html += '<div class="table-main p-4">' + renderTaxonomy(data.theme_taxonomy) + '</div>';
    }

    // Render content (list of LabeledChunk)
    if (data.content && Array.isArray(data.content) && data.content.length) {
      html += '<h3 class="text-2xl font-bold text-white mb-2">Labeled Content</h3>';
      html += '<div class="max-h-[500px] overflow-y-auto">'
      html += '<table class="table-auto">';
      html += '<tr>';
      html += '<th class="sticky top-0 z-10 bg-zinc-900">Time Period</th><th class="sticky top-0 z-10 bg-zinc-900">Date</th><th class="sticky top-0 z-10 bg-zinc-900">Company</th><th class="sticky top-0 z-10 bg-zinc-900">Sector</th><th class="sticky top-0 z-10 bg-zinc-900">Industry</th><th class="sticky top-0 z-10 bg-zinc-900">Country</th><th class="sticky top-0 z-10 bg-zinc-900">Ticker</th><th class="sticky top-0 z-10 bg-zinc-900"><span>Headline</span><span><button type="button" class="text-blue-500 text-sm" onclick=showInfoModal(\'headline_comment\') title="Info">ⓘ</button></span></th><th class="sticky top-0 z-10 bg-zinc-900">Quote</th><th class="sticky top-0 z-10 bg-zinc-900">Motivation</th><th class="sticky top-0 z-10 bg-zinc-900">Theme</th>';
      html += '</tr>';
      for (const chunk of data.content) {
        html += '<tr class="divide-y divide-white">';
        html += `<td>${escapeHtml(chunk.time_period)}</td>`;
        html += `<td>${escapeHtml(chunk.date)}</td>`;
        html += `<td>${escapeHtml(chunk.company)}</td>`;
        html += `<td>${escapeHtml(chunk.sector)}</td>`;
        html += `<td>${escapeHtml(chunk.industry)}</td>`;
        html += `<td>${escapeHtml(chunk.country)}</td>`;
        html += `<td>${escapeHtml(chunk.ticker)}</td>`;
        html += `<td onclick="showDocumentModal('${chunk.document_id}')">${escapeHtml(chunk.headline)}</td>`;
        html += `<td>${escapeHtml(chunk.quote)}</td>`;
        html += `<td>${escapeHtml(chunk.motivation)}</td>`;
        html += `<td>${escapeHtml(chunk.theme)}</td>`;
        html += '</tr>';
      }
      html += '</table>';
      html += '</div>'
    }
    return html;
  };

  function closeModal() {
    document.getElementById('jsonModal').style.display = 'none';
  }
  window.closeModal = closeModal;
  function copyJson() {
    const jsonContent = document.getElementById('jsonContent');
    if (!jsonContent) return;
    const text = jsonContent.innerText || jsonContent.textContent;
    if (navigator.clipboard && window.isSecureContext) {
      navigator.clipboard.writeText(text).then(() => {
        const btn = document.getElementById('copyBtn');
        if (btn) {
          const orig = btn.textContent;
          btn.textContent = 'Copied!';
          setTimeout(() => { btn.textContent = orig; }, 1200);
        }
      });
    } else {
      // fallback for older browsers
      const textarea = document.createElement('textarea');
      textarea.value = text;
      textarea.setAttribute('readonly', '');
      textarea.style.position = 'absolute';
      textarea.style.left = '-9999px';
      document.body.appendChild(textarea);
      textarea.select();
      try {
        document.execCommand('copy');
        const btn = document.getElementById('copyBtn');
        if (btn) {
          const orig = btn.textContent;
          btn.textContent = 'Copied!';
          setTimeout(() => { btn.textContent = orig; }, 1200);
        }
      } catch (err) { }
      document.body.removeChild(textarea);
    }
  };    
</script>
</form>
{% endblock %}