
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Thematic Screener</title>
  <link rel="icon" href="https://app.bigdata.com/favicon.ico"/>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 2em;
      background: #f5f5f5;
      color: #333;
    }
    .input-field {
      width: 300px;
      padding: 8px;
      font-size: 16px;
      margin-bottom: 10px;
      display: block;
    }
    .btn {
      padding: 8px 12px;
      font-size: 16px;
      cursor: pointer;
    }
    .output-pre {
      background-color: #272822;
      color: #f8f8f2;
      padding: 16px;
      white-space: pre-wrap;
      word-wrap: break-word;
      overflow: auto;
      border-radius: 5px;
      margin-top: 20px;
    }
    .error {
      color: red;
    }
    .table-main {
      background: #fff;
      border-radius: 6px;
      box-shadow: 0 1px 4px #ccc;
    }
    .mb-20 {
      margin-bottom: 20px;
    }
    .mt-20 {
      margin-top: 20px;
    }
    .mt-2em {
      margin-top: 2em;
    }
    .modal-bg {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(0,0,0,0.5);
    }
    .modal-content {
      background: #fff;
      margin: 5vh auto;
      padding: 20px;
      border-radius: 8px;
      width: 80vw;
      max-width: 900px;
      position: relative;
    }
    .modal-close {
      position: absolute;
      top: 10px;
      right: 10px;
      font-size: 18px;
    }
    .modal-copy {
      position: absolute;
      top: 10px;
      right: 50px;
      font-size: 15px;
      padding: 4px 10px;
      cursor: pointer;
    }
    .info-btn {
      background: #f5f5f5;
      color: #000;
      border: none;
      border-radius: 50%;
      width: 1.1em;
      height: 1.1em;
      font-size: 0.9em;
      box-shadow: 0 2px 8px rgba(0,0,0,0.15);
    }
  </style>
</head>
<body>
  <!-- Individual Info Buttons and Modals for Each Label -->
  <div id="infoModalsContainer"></div>
  <h1>Thematic Screener Request</h1>
  <form id="screenerForm" autocomplete="off">

    <label for="theme">
      Theme: <button type="button" class="info-btn" onclick="showInfoModal('theme')" title="Info about Theme">i</button>
    </label>
    <input type="text" id="theme" class="input-field" placeholder="{{ theme }}" required value="{{ theme }}" />

    <label for="focus">
      Focus: <button type="button" class="info-btn" onclick="showInfoModal('focus')" title="Info about Focus">i</button>
    </label>
    <input type="text" id="focus" class="input-field" placeholder="{{ focus }}" value="{{ focus }}" />

    <label for="companies">
      Company Universe (either a comma separated RavenPack IDs or a watchlist ID): <button type="button" class="info-btn" onclick="showInfoModal('companies')" title="Info about Companies">i</button>
    </label>
    <input type="text" id="companies" class="input-field" placeholder="{{ companies }}" value="{{ companies }}" />

    <label for="start_date">
      Start Date: <button type="button" class="info-btn" onclick="showInfoModal('start_date')" title="Info about Start Date">i</button>
    </label>
    <input type="date" id="start_date" class="input-field" placeholder="{{ start_date }}" value="{{ start_date }}" />

    <label for="end_date">
      End Date: <button type="button" class="info-btn" onclick="showInfoModal('start_date')" title="Info about End Date">i</button>
    </label>
    <input type="date" id="end_date" class="input-field" placeholder="{{ end_date }}" value="{{ end_date }}" />

    <label for="frequency">
      Frequency: <button type="button" class="info-btn" onclick="showInfoModal('frequency')" title="Info about Frequency">i</button>
    </label>
    <select id="frequency" class="input-field">
      <option value="D" {% if frequency == 'D' %}selected{% endif %}>Daily</option>
      <option value="W" {% if frequency == 'W' %}selected{% endif %}>Weekly</option>
      <option value="M" {% if frequency == 'M' %}selected{% endif %}>Monthly</option>
      <option value="3M" {% if frequency == '3M' %}selected{% endif %}>Quarterly</option>
      <option value="Y" {% if frequency == 'Y' %}selected{% endif %}>Yearly</option>
    </select>

    <label for="fiscal_year">
      Fiscal Year: <button type="button" class="info-btn" onclick="showInfoModal('fiscal_year')" title="Info about Fiscal Year">i</button>
    </label>
    <input type="text" id="fiscal_year" class="input-field" placeholder="e.g. 2025" value="{{ fiscal_year if fiscal_year else "" }}" />

    <label for="llm_model">
      LLM Model: <button type="button" class="info-btn" onclick="showInfoModal('llm_model')" title="Info about LLM Model">i</button>
    </label>
    <input type="text" id="llm_model" class="input-field" placeholder="{{ llm_model }}" value="{{ llm_model }}" />

    <!-- Document Type hidden for now until we improve the UX -->
    <label for="document_type" style="display:none;">
      Document Type: <button type="button" class="info-btn" onclick="showInfoModal('document_type')" title="Info about Document Type">i</button>
    </label>
    <select id="document_type" class="input-field" style="display:none;">
      <option value="ALL" {% if document_type == 'ALL' %}selected{% endif %}>ALL</option>
      <option value="FILINGS" {% if document_type == 'FILINGS' %}selected{% endif %}>FILINGS</option>
      <option value="TRANSCRIPTS" {% if document_type == 'TRANSCRIPTS' %}selected{% endif %}>TRANSCRIPTS</option>
      <option value="NEWS" {% if document_type == 'NEWS' %}selected{% endif %}>NEWS</option>
      <option value="FILES" {% if document_type == 'FILES' %}selected{% endif %}>FILES</option>
    </select>

    <label for="rerank_threshold">
      Rerank Threshold (0-1): <button type="button" class="info-btn" onclick="showInfoModal('rerank_threshold')" title="Info about Rerank Threshold">i</button>
    </label>
    <input type="number" id="rerank_threshold" class="input-field" min="0" max="1" step="0.01" placeholder="{{ rerank_threshold if rerank_threshold is defined and rerank_threshold is not none else '' }}" value="{{ rerank_threshold if rerank_threshold is defined and rerank_threshold is not none else '' }}" />


    <label for="document_limit">
      Document Limit: <button type="button" class="info-btn" onclick="showInfoModal('document_limit')" title="Info about Document Limit">i</button>
    </label>
    <input type="number" id="document_limit" class="input-field" placeholder="{{ document_limit }}" value="{{ document_limit }}" min="1" />

    <label for="batch_size">
      Batch Size: <button type="button" class="info-btn" onclick="showInfoModal('batch_size')" title="Info about Batch Size">i</button>
    </label>
    <input type="number" id="batch_size" class="input-field" placeholder="{{ batch_size }}" value="{{ batch_size }}" min="1" />

    <button type="submit" class="btn mb-20">Run Screener</button>
    <script>
      // Info modal content for each label
      const infoContents = {
        theme: `<b>Theme</b>:<br>The main theme, topic, or trend you want to screen for exposure. It can be specified as a single word or as a short sentence. The Screener will generate a list of sub-themes representing individual, self contained components of the main theme. The theme can contain multiple core concepts, but we would recommend not adding too many core concepts in the same screener run.<br><i>Examples: "Artificial Intelligence", "Supply Chain Reshaping", "Energy Transition"</i>`,
        focus: `<b>Focus</b>:<br> Use this parameter to pass additional, custom instructions to the llm when breaking down the theme into sub-themes. These parameters allow you to guide the mindmap creation and customize it to your needs, as it allows users to inject their own domain knowledge, your specific point of view, and it will ensure that the mindmap will focus on the core concepts required.`,
        companies: `<b>Company Universe</b>:<br>The portfolio of companies you want to screen for exposure, either as a list of RavenPack entity IDs (e.g., ["4A6F00", "D8442A"]) or a watchlist ID (e.g., "44118802-9104-4265-b97a-2e6d88d74893"). Watchlists can be created programmatically using the <a href='https://docs.bigdata.com/getting-started/watchlist_management' target='_blank'>Bigdata.com SDK</a> or through the <a href='https://app.bigdata.com/watchlists' target='_blank'>Bigdata app</a>.`,
        start_date: `<b>Start/End Date</b>:<br>The start and end of the time sample during which you want to screen your portfolio for thematic exposure. Format: <code>YYYY-MM-DD</code>.`,
        document_type: `<b>Document Type</b>:<br>The type of documents to search over. Use this to analyze text data from news, corporate transcripts, or filings. Currently, only "TRANSCRIPTS" is supported.`,
        fiscal_year: `<b>Fiscal Year</b>:<br>For Transcripts and Filings, filter documents by their reporting details. <b>fiscal_year</b> represents the annual reporting period and can be combined with <b>start_date</b> and <b>end_date</b> for time-sensitive queries. Not applicable to News.`,
        rerank_threshold: `<b>Rerank Threshold</b>:<br>Optional, used with sentence search only. Ensures close cosine similarity between sentence embeddings and retrieved chunks. By default, not applied. For most use cases, one-step retrieval is sufficient. <a href='https://docs.bigdata.com/how-to-guides/rerank_search' target='_blank'>Learn more</a>.`,
        frequency: `<b>Frequency</b>:<br>Break down your sample range into higher frequency intervals (<code>D</code>, <code>Y</code>, <code>M</code>, <code>3M</code>, <code>Y</code>). Useful for large samples to control document retrieval over time.`,
        llm_model: `<b>LLM Model</b>:<br>The LLM model to be used for mindmap generation and text analysis. It has to be specified as a string containing both provider name and model name separated by two colons: <provider::model>.`,
        document_limit: `<b>Document Limit</b>:<br>The maximum number of documents to be retrieved by each query. This is a single value that applies to any combination of query statement & date range.`,
        batch_size: `<b>Batch Size</b>:<br>Set this parameter when screening a large portfolio of companies (i.e. 50 or more). It allows to break down the portfolio into smaller batches of fixed size, and instructs the search service to run parallel queries for each and every batch. This allows for improving the sampling across your portfolio, given the document limit constraint that has to be applied per query.`
      };

      function showInfoModal(label) {
        let container = document.getElementById('infoModalsContainer');
        container.innerHTML = `<div class='modal-bg' style='display:block;' onclick='if(event.target==this)this.style.display="none";'>
          <div class='modal-content'>
            <button class='modal-close' onclick='this.closest(".modal-bg").style.display="none"'>&times;</button>
            <div style='font-size:1.1em;'>${infoContents[label] || 'No info available.'}</div>
            <div style='margin-top:18px;font-size:0.95em;'>For a complete list of parameters and their descriptions, refer to the <a href='http://localhost:8000/docs' target='_blank'>API documentation</a>.</div>
          </div>
        </div>`;
      }
    </script>
  </form>
  <div id="spinner" style="display:none;">⏳ Loading...</div>
  <button id="showJsonBtn" class="btn mb-20" style="display:none;">Show raw JSON</button>
  <div id="output"></div>

  <!-- Modal for JSON output -->
  <div id="jsonModal" class="modal-bg">
    <div class="modal-content">
      <button onclick="copyJson()" class="modal-copy">Copy</button>
      <button onclick="closeModal()" class="modal-close">&times;</button>
      <h2>Raw JSON Output</h2>
      <pre id="jsonContent" class="output-pre" style="max-height:60vh;"></pre>
    </div>
  </div>

  <script>
    let lastJson = null;
    function escapeHtml(text) {
      if (text === null || text === undefined) return '';
      const str = String(text);
      return str.replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/\"/g, '&quot;')
                .replace(/'/g, '&#39;');
    }

    function renderScreenerReport(data) {
      if (!data || typeof data !== 'object') return '<span class="error">No data to display.</span>';
      let html = '<h2>Thematic Screener Result</h2>';

      // Render theme_scoring (dict of ticker -> CompanyScoring)
      if (data.theme_scoring && data.theme_scoring) {
        html += '<h3>Theme Scoring</h3>';
        html += '<table border="1" cellpadding="6" cellspacing="0" class="table-main">';
        html += '<tr>';
        // Dynamically create theme columns
        let allThemes = new Set();
        for (const scoring of Object.values(data.theme_scoring)) {
          if (scoring.themes) {
            Object.keys(scoring.themes).forEach(theme => allThemes.add(theme));
          }
        }
        const themeList = Array.from(allThemes);
        html += '<th>Ticker</th><th>Industry</th><th>Composite Score</th><th>Motivation</th>';
        themeList.forEach(theme => {
          html += `<th>${escapeHtml(theme)}</th>`;
        });
        html += '</tr>';
        for (const [ticker, scoring] of Object.entries(data.theme_scoring)) {
          html += '<tr>';
          html += `<td>${escapeHtml(scoring.ticker)}</td>`;
          html += `<td>${escapeHtml(scoring.industry)}</td>`;
          html += `<td>${escapeHtml(scoring.composite_score)}</td>`;
          html += `<td>${escapeHtml(scoring.motivation)}</td>`;
          // Explode themes into columns
          themeList.forEach(theme => {
            if (scoring.themes && theme in scoring.themes) {
              html += `<td>${escapeHtml(scoring.themes[theme])}</td>`;
            } else {
              html += '<td></td>';
            }
          });
          html += '</tr>';
        }
        html += '</table>';
      }

      // Render theme_taxonomy (tree)
      function renderTaxonomy(node, depth=0) {
        if (!node) return '';
        let pad = '&nbsp;'.repeat(depth * 4);
        let html = `${pad}<b>${escapeHtml(node.label)}</b> (Node: ${escapeHtml(node.node)})`;
        if (node.summary) html += ` - ${escapeHtml(node.summary)}`;
        if (node.children && node.children.length) {
          html += '<ul>';
          for (const child of node.children) {
            html += '<li>' + renderTaxonomy(child, depth+1) + '</li>';
          }
          html += '</ul>';
        }
        return html;
      }
      if (data.theme_taxonomy) {
        html += '<h3>Theme Taxonomy</h3>';
        html += '<div class="table-main" style="padding:10px;">' + renderTaxonomy(data.theme_taxonomy) + '</div>';
      }

      // Render content (list of LabeledChunk)
      if (data.content && Array.isArray(data.content) && data.content.length) {
        html += '<h3>Labeled Content</h3>';
        html += '<table border="1" cellpadding="6" cellspacing="0" class="table-main">';
        html += '<tr>';
        html += '<th>Time Period</th><th>Date</th><th>Company</th><th>Sector</th><th>Industry</th><th>Country</th><th>Ticker</th><th>Document ID</th><th>Headline</th><th>Quote</th><th>Motivation</th><th>Theme</th>';
        html += '</tr>';
        for (const chunk of data.content) {
          html += '<tr>';
          html += `<td>${escapeHtml(chunk.time_period)}</td>`;
          html += `<td>${escapeHtml(chunk.date)}</td>`;
          html += `<td>${escapeHtml(chunk.company)}</td>`;
          html += `<td>${escapeHtml(chunk.sector)}</td>`;
          html += `<td>${escapeHtml(chunk.industry)}</td>`;
          html += `<td>${escapeHtml(chunk.country)}</td>`;
          html += `<td>${escapeHtml(chunk.ticker)}</td>`;
          html += `<td>${escapeHtml(chunk.document_id)}</td>`;
          html += `<td>${escapeHtml(chunk.headline)}</td>`;
          html += `<td>${escapeHtml(chunk.quote)}</td>`;
          html += `<td>${escapeHtml(chunk.motivation)}</td>`;
          html += `<td>${escapeHtml(chunk.theme)}</td>`;
          html += '</tr>';
        }
        html += '</table>';
      }
      return html;
    }

  // Helper to get URL param
  function getUrlParam(name) {
    const url = new URL(window.location.href);
    return url.searchParams.get(name);
  }

  document.getElementById('screenerForm').onsubmit = async function(e) {
      e.preventDefault();
      const output = document.getElementById('output');
      const spinner = document.getElementById('spinner');
      const showJsonBtn = document.getElementById('showJsonBtn');
      const submitBtn = document.querySelector('button[type="submit"]');
      output.innerHTML = '';
      output.classList.remove('error');
      showJsonBtn.style.display = 'none';
      lastJson = null;

      // Disable the submit button
      submitBtn.disabled = true;
      submitBtn.textContent = 'Waiting for response...';

      // Gather form data
      const theme = document.getElementById('theme').value.trim();
      const focus = document.getElementById('focus').value.trim();
      const companies = document.getElementById('companies').value.trim();
      const start_date = document.getElementById('start_date').value;
      const end_date = document.getElementById('end_date').value;
      let fiscal_year = document.getElementById('fiscal_year').value.trim();
      if (!fiscal_year || isNaN(Number(fiscal_year))) {
        fiscal_year = null;
      }
      const llm_model = document.getElementById('llm_model').value.trim();
      const document_type = document.getElementById('document_type').value;
      const rerank_threshold = document.getElementById('rerank_threshold').value;
      const frequency = document.getElementById('frequency').value;
      const document_limit = document.getElementById('document_limit').value;
      const batch_size = document.getElementById('batch_size').value;

      // Build request payload
      let payload = {
        theme,
        focus,
        focus,
        fiscal_year,
        llm_model,
        document_type,
        frequency,
        document_limit: document_limit ? parseInt(document_limit) : undefined,
        batch_size: batch_size ? parseInt(batch_size) : undefined
      };
      
      // A list of companies
      if (companies.includes(',')) {
        payload.companies = companies.split(',').map(s => s.trim()).filter(Boolean);
      // A single RP Entity ID
      } else if (companies.length === 6) {
        payload.companies = [companies];
      // A watchlist ID
      } else if (companies.length > 6) {
        payload.companies = companies;
      }

      if (start_date) payload.start_date = start_date;
      if (end_date) payload.end_date = end_date;
      if (rerank_threshold) payload.rerank_threshold = parseFloat(rerank_threshold);

      // Add token from URL param if present
      const params = new URLSearchParams();
      const token = getUrlParam('token');
      if (token) {
        params.append("token", token);
      }

      spinner.style.display = 'block';
      try {
        const response = await fetch(`/thematic-screener?${params}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });
        if (!response.ok) {
          throw new Error(`HTTP error ${response.status}`);
        }
        const data = await response.json();
        lastJson = data;
        output.innerHTML = renderScreenerReport(data);
        showJsonBtn.style.display = 'inline-block';
      } catch (err) {
        output.innerHTML = `<span class="error">❌ Error: ${err.message}</span>`;
        output.classList.add('error');
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = 'Run Screener';
        spinner.style.display = 'none';
      }
    };

    document.getElementById('showJsonBtn').onclick = function() {
      if (lastJson) {
        document.getElementById('jsonContent').textContent = JSON.stringify(lastJson, null, 2);
        document.getElementById('jsonModal').style.display = 'block';
      }
    };

    function closeModal() {
      document.getElementById('jsonModal').style.display = 'none';
    }
    window.closeModal = closeModal;
    function copyJson() {
      const jsonContent = document.getElementById('jsonContent');
      if (!jsonContent) return;
      const text = jsonContent.innerText || jsonContent.textContent;
      if (navigator.clipboard && window.isSecureContext) {
        navigator.clipboard.writeText(text).then(() => {
          const btn = document.querySelector('.modal-copy');
          if (btn) {
            const orig = btn.textContent;
            btn.textContent = 'Copied!';
            setTimeout(() => { btn.textContent = orig; }, 1200);
          }
        });
      } else {
        // fallback for older browsers
        const textarea = document.createElement('textarea');
        textarea.value = text;
        textarea.setAttribute('readonly', '');
        textarea.style.position = 'absolute';
        textarea.style.left = '-9999px';
        document.body.appendChild(textarea);
        textarea.select();
        try {
          document.execCommand('copy');
          const btn = document.querySelector('.modal-copy');
          if (btn) {
            const orig = btn.textContent;
            btn.textContent = 'Copied!';
            setTimeout(() => { btn.textContent = orig; }, 1200);
          }
        } catch (err) {}
        document.body.removeChild(textarea);
      }
    }
  </script>
</body>
</html>
